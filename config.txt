###############################################################################################
# Description:
#   If set to 1, the kernel will be started in 64-bit mode. Setting it to 0 selects 32-bit mode.
#   In 64-bit mode, the firmware will choose an appropriate kernel (e.g. kernel8.img), unless 
#   there is an explicit kernel option defined, in which case that option is used instead.
#
# Notes:
#   - This setting allows the user to control whether the Raspberry Pi boots in 32-bit or 64-bit mode.
#   - In 64-bit mode, the bootloader and firmware automatically choose a compatible kernel.
#   - Ensure that a 64-bit compatible kernel (e.g., kernel8.img) is available for use when setting this to 1.
###############################################################################################
arm_64bit=1

###############################################################################################
# Description:
#   If uart_2ndstage is set to 1, debug logging to the UART is enabled. This option automatically 
#   enables UART logging in start.elf. The BOOT_UART property also enables bootloader UART logging 
#   but does not enable UART logging in start.elf unless uart_2ndstage=1 is set.
#   This causes the second-stage loader (bootcode.bin on devices prior to the Raspberry Pi 4, 
#   or the boot code in the EEPROM for Raspberry Pi 4 devices) and the main firmware (start*.elf) 
#   to output diagnostic information to UART0.
#
# Notes:
#   - Enabling uart_2ndstage is helpful for debugging early boot problems but may interfere with Bluetooth 
#     operation unless Bluetooth is disabled (dtoverlay=disable-bt) or switched to another UART (dtoverlay=miniuart-bt).
#   - UART logging during the boot process can cause data loss if accessed simultaneously with Linuxâ€™s use of UART.
#   - Default: 0 (disabled).
###############################################################################################
uart_2ndstage=1

###############################################################################################
# Description:
#   Setting enable_jtag_gpio=1 enables JTAG functionality on the GPIO pins 22-27 and configures 
#   them for internal SoC connections, enabling the JTAG interface for the ARM CPU. This setting works 
#   on all models of Raspberry Pi and is used for debugging or interfacing with JTAG devices.
#
# Pin Mapping:
#   GPIO22 | ARM_TRST
#   GPIO23 | ARM_RTCK
#   GPIO24 | ARM_TDO
#   GPIO25 | ARM_TCK
#   GPIO26 | ARM_TDI
#   GPIO27 | ARM_TMS
#
# Notes:
#   - This setting is typically used for hardware-level debugging or advanced system interaction.
#   - JTAG is used for low-level debugging and is not typically required for general users.
#   - Default: 0 (disabled).
###############################################################################################
#enable_jtag_gpio=1 

###############################################################################################
# Description:
#   The 'dtoverlay=miniuart-bt' setting enables the Bluetooth functionality to use the mini UART, 
#   freeing up the primary UART (PL011 - UART0) for other uses, such as serial debugging or console access.
#   This overlay also automatically disables the first UART (PL011) for Bluetooth communication and 
#   switches Bluetooth to use the mini UART instead.
#
# Notes:
#   - Using 'dtoverlay=miniuart-bt' is helpful when needing to use the primary UART for other tasks while
#     still enabling Bluetooth functionality.
#   - Bluetooth performance may be limited by the mini UART, which has some baud rate limitations compared 
#     to the full PL011 UART.
#   - Ensure that the VPU core clock is set to a fixed frequency (e.g., core_freq=250) when using this setting.
###############################################################################################
dtoverlay=miniuart-bt

###############################################################################################
# Description:
#   The 'armstub' configuration setting specifies the binary file used as the ARM stub in the boot process. 
#   The ARM stub is a small piece of code that runs before the main OS or kernel is loaded, often used to 
#   set up system configurations, initialize memory, or transition to a higher privilege level.
#
# Explanation:
#   - The 'armstub' setting tells the bootloader which ARM stub binary file to load and execute during boot. 
#     The ARM stub code is executed before the operating system or kernel to initialize essential settings.
#   - The ARM stub can perform tasks such as CPU initialization, memory configuration, or setting up system 
#     parameters that the kernel or OS will need to run correctly.
#
# Notes:
#   - Ensure that the specified ARM stub binary is compatible with the target architecture and has been 
#     correctly compiled.
#   - This setting allows the user to customize the ARM stub for specific hardware initializations, special 
#     configurations, or other tasks needed during the boot process.
#   - If this setting is omitted or invalid, the default ARM stub will be used.
#
# Example Use Case:
#   - If you need to load a custom ARM stub that performs specific hardware setup before loading the OS, 
#     specify the path to the ARM stub binary here.
#
# Path Considerations:
#   - Ensure that the path to the ARM stub binary is correct and the file is accessible from the bootloader 
#     environment. The bootloader will attempt to load the file from the configured boot partition.
#
# Performance Notes:
#   - ARM stub binaries are typically small and perform minimal operations, but excessive operations in the 
#     ARM stub can delay the boot process.
###############################################################################################
armstub=armstub_minimal.bin